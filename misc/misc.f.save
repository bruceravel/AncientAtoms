c---------------------------------------------------------------- 
      function istrln (string)
c
c  returns index of last non-blank character.  
c  returns zero if string is null or all blank.
      character*(*)  string
c-- if null string or blank string, return length zero.
      istrln = 0
      if (string(1:1).eq.char(0))  return
      if (string.eq.' ')  return
c 
c-- find rightmost non-blank, non-null character.
      ilen = len (string)
      do 20  i = ilen, 1, -1
         if ((string (i:i) .ne. ' ') .and.
     $              (string (i:i) .ne. char(0)))  goto 30
   20 continue
   30 istrln = i

      return
c end function istrln 
      end
c---------------------------------------------------------------- 
      subroutine triml (string)
c removes leading blanks.
      character*(*)  string
      jlen = istrln(string)
c 
c-- all blank and null strings are special cases.
      if (jlen .eq. 0)  return
c-- find first non-blank char
      do 10  i = 1, jlen
         if (string (i:i) .ne. ' ')  goto 20
  10  continue
  20  continue
c-- if i is greater than jlen, no non-blanks were found.
      if (i .gt. jlen)  return
c-- remove the leading blanks.
      string = string (i:)
      return
c end subroutine triml 
      end
c---------------------------------------------------------------- 
      subroutine untab (string)
c replace tabs with blanks :    tab is ascii dependent
      integer        itab , i, ilen
      parameter      (itab = 9)
      character*(*)  string, tab*1
      tab  = char(itab)
      ilen = max(1, istrln(string))
 10   continue 
        i = index(string(:ilen), tab ) 
        if (i .ne. 0) then
            string(i:i) = ' '
            go to 10
        end if
      return
c end subroutine untab
      end
c---------------------------------------------------------------- 
      subroutine upper (str)
c  changes a-z to upper case.  ascii specific
c-   for ascii:  ichar(upper case 'a') =  65
c-               ichar(lower case 'a') =  97
      character*(*)  str
      integer iupa, iloa, iloz, idif
      data    iupa, iloa / 65, 97/
      idif = iloa - iupa 
      iloz = iloa + 25
      jlen = max(1, istrln (str) )
      do 10  i = 1, jlen
         ic = ichar (str(i:i))
         if ((ic.ge.iloa).and.(ic.le.iloz))  str(i:i) = char(ic-idif)
   10 continue
      return
c end subroutine upper
      end
c---------------------------------------------------------------- 
      subroutine lower (str)
c  changes a-z to lower case.  ascii specific
c-   for ascii:  ichar(upper case 'a') =  65
c-               ichar(lower case 'a') =  97
      character*(*)  str
      integer iupa, iloa, iupz, idif
      data    iupa, iloa / 65, 97/
      idif = iloa - iupa 
      iupz = iupa + 25
      jlen = max(1, istrln (str) )
      do 10  i = 1, jlen
         ic = ichar (str(i:i))
         if ((ic.ge.iupa).and.(ic.le.iupz)) str(i:i) = char(ic+idif)
   10 continue
      return
c end subroutine lower
      end
c---------------------------------------------------------------- 
      subroutine smcase (str, contrl)
c  convert case of string *str*to be the same case 
c  as the first letter of string *contrl* 
c  if contrl(1:1) is not a letter, *str* will be made lower case.
      character*(*) str, contrl, s1*1, t1*1
      s1 = contrl(1:1)
      t1 = s1
      call lower(t1)
      if (t1.eq.s1)  call lower(str) 
      if (t1.ne.s1)  call upper(str) 
      return
c end subroutine smcase
      end
c---------------------------------------------------------------- 
      subroutine case(test,word)
c  returns *word* in the same case as *test*
c  note that this is just the reverse of smcase !
      character*(*) test, word
      call smcase (word, test)
      return
c  end subroutine case
      end
c---------------------------------------------------------------- 
       logical function isnum (string)
c  returns true if string can be a number, else returns false 
c  recognizes e and d exponentials, bit is not foolproof
c  to be a number, a string must contain:
c     - only characters in  'de.+-, 1234567890' (case is checked)
c     - no more than one 'd' or 'e' 
c     - no more than one '.'
       character*(*)  string, str*70, number*20
       integer        iexp, idec, i, ilen, ier, j, istrln
       real           x
       external       istrln
c  note:  layout of *number* is important: don't change this!!
       data           number   /'de.+-, 1234567890'/
c-
       isnum = .false. 
       iexp  = 0
       idec  = 0
       str   = string
       ilen  = max(1, istrln (str) )
       call smcase(str, number )
       do 100  i = 1, ilen
          j = index(number,str(i:i) )
          if (j.le.0)               go to 200
          if((j.eq.1).or.(j.eq.2))  iexp = iexp + 1
          if (j.eq.3)               idec = idec + 1
 100   continue
c  every character in the string was found in  *number*
c  so the string probably is a number
       isnum = .true.
c  but let's do a few more tests: 
c    number of exponential and decimal markers       
       if (iexp.ge.2) isnum = .false.
       if (idec.ge.2) isnum = .false.
c    read with iostat (this may report an error, but not always)
       read(str,150,iostat=ier)  x
 150   format (bn,f70.0)
       if (ier.ne.0)  isnum = .false.
c  all tests done
 200   continue
       return
c  end logical function isnum
       end
c---------------------------------------------------------------- 
      subroutine bwords (s, nwords, words)
c
c     breaks string into words.  words are seperated by one or more
c     blanks, or a comma or equal sign and zero or more blanks.
c
c     args        i/o      description
c     ----        ---      -----------
c     s            i       char*(*)  string to be broken up
c     nwords      i/o      input:  maximum number of words to get
c                          output: number of words found
c     words(nwords) o      char*(*) words(nwords)
c                          contains words found.  words(j), where j is
c                          greater then nwords found, are undefined on
c                          output.
c
c      written by:  steven zabinsky, september 1984
c
c**************************  deo soli gloria  **************************
c-- no floating point numbers in this routine.
      implicit integer (a-z)
      character*(*) s, words(nwords)
      character blank, comma, equal
      parameter (blank = ' ', comma = ',', equal = '=')
 
c-- betw    .true. if between words
c   comfnd  .true. if between words and a comma or equal has
c                                         already been found
      logical betw, comfnd
c-- maximum number of words allowed
      wordsx = nwords
 
c-- slen is last non-blank character in string
      slen = istrln (s)
 
c-- all blank string is special case
      if (slen .eq. 0)  then
         nwords = 0
         return
      endif
 
c-- begc is beginning character of a word
      begc = 1
      nwords = 0
      betw   = .true.
      comfnd = .true.
      do 10  i = 1, slen
         if (s(i:i) .eq. blank)  then
            if (.not. betw)  then
               nwords = nwords + 1
               words (nwords) = s (begc : i-1)
               betw = .true.
               comfnd = .false.
            endif
         elseif ((s(i:i).eq.comma).or.(s(i:i).eq.equal))  then
            if (.not. betw)  then
               nwords = nwords + 1
               words (nwords) = s(begc : i-1)
               betw = .true.
            elseif (comfnd)  then
               nwords = nwords + 1
               words (nwords) = blank
            endif
            comfnd = .true.
         else
            if (betw)  then
               betw = .false.
               begc = i
            endif
         endif
         if (nwords .ge. wordsx)  return
   10 continue
c 
      if (.not. betw  .and.  nwords .lt. wordsx)  then
         nwords = nwords + 1
         words (nwords) = s (begc :slen)
      endif
      return
c end subroutine bwords 
      end
c---------------------------------------------------------------- 
      subroutine strclp(str,str1,str2,strout)
c
c  a rather complex way of clipping a string: 
c      strout = the part of str that begins with str2.   
c  str1 and str2 are subsrtings of str, (str1 coming before str2),
c  and even if they are similar, strout begins with str2
c  for example:
c   1.  str =  "title title my title" with  str1 = str2 = "title"
c       gives strout = "title my title"
c   2.  str =  "id  1  1st path label" with str1 = "1", str2 = "1st"
c       gives strout = "1st path label"
c
      character*(*)  str, str1, str2, strout
      integer  i1, i2, ibeg, iend, istrln, ilen
      external istrln
      ilen   = len(strout)
      i1     = max(1, istrln(str1))
      i2     = max(1, istrln(str2))
      i1e    = index(str,str1(1:i1)) + i1
      ibeg   = index(str(i1e:),str2(1:i2) ) + i1e - 1
      iend   = min(ilen+ibeg, istrln(str) )                 
      strout = str(ibeg:iend)
      return
c end subroutine strclp
      end
c---------------------------------------------------------------- 
      subroutine messag(messg)
c  write message to both standard ouput and to unit 2 
c  unit 2 must be opened already!
      character*(*) messg
      write(*,10)   messg
 10   format(1x,a)
      return
c end subroutine messag
      end
c---------------------------------------------------------------- 
      subroutine getrea(keywrd,string,value)
      
      character*(*) keywrd, string
      character*72  messg
      integer       j, k, id, ie
      real          value
      logical       isnum

 400  format(bn,f13.0)
 410  format(bn,e19.13)
 420  format(bn,d19.13)

      if (isnum(string)) then
          call lower(string)
          ie = index(string, 'e')
          id = index(string, 'd')
          if ((id.eq.0).and.(ie.eq.0)) then
              read(string,400)value
          elseif (ie.ne.0) then
              read(string,410)value
          elseif (id.ne.0) then
              read(string,420)value
          endif
      else
          j = istrln(string)
          k = istrln(keywrd)
          messg = 'Error reading '//string(:j)//' as the value for '//
     $                keywrd(:k)
          call messag(messg)
          messg = string(:j)//' must be a real number.'
          call messag(messg)
          stop
      endif

      return
c  end subroutine getrea
      end

c**********************************************************************

      subroutine getint(keywrd,string,ivalue)
      
      character*(*) keywrd, string
      character*72  messg
      integer       ivalue, j, k

 400  format(bn,i10)

      read(string,400,iostat=ierr)ivalue
      if (ierr.ne.0) then
          j = istrln(string)
          k = istrln(keywrd)
          messg = 'Error reading '//string(:j)//' as the value for '//
     $                keywrd(:k)
          call messag(messg)
          messg = string(:j)//' must be an integer.'
          call messag(messg)
          stop
      endif

      return
c  end subroutine getint
      end

c**********************************************************************

      subroutine getlog(keywrd,string,lvalue)
      
      character*(*) keywrd, string
      character*72  test*2
      logical       lvalue

      test   = 'ab'
      lvalue = .false.
      call triml(string)
      call case(test,string)
      if ( (string(:1).eq.'t') .or. (string(:1).eq.'y')
     $                         .or. (string(:2).eq.'on') )
     $            lvalue=.true. 

      return
c  end subroutine getlog
      end

c**********************************************************************

      subroutine gettit(keywrd,string,title,ntit,stdout)
      
      character*(*) keywrd, string, title
      character*72  messg, toss
      integer       ntit, i, j
      logical       stdout

      ntit  = ntit + 1
      toss  = string
      call case(keywrd,toss)
      i     = index(toss, keywrd)
      j     = istrln(keywrd)
      title = string(i+j+1:70)
      call triml(title)
      if ( (title(:1).eq.'=') .or. (title(:1).eq.',') ) then
          toss  = title(2:)
          title = toss
          call triml(title)
      endif
      if (.not.stdout) then
          messg = '  title > '//title
          call messag(messg)
      endif      

      return
c  end subroutine gettit
      end

c****************************************************************
       subroutine polyft(xfit1,xfit2,xdata,ydata,ndata,nterms,aout)
c
c  get coefficients for polynomial fit :
c      ydata = aout(1) + aout(2)*xdata  + aout(3) *xdata^2 + ...
c  the fit is done between xdata = xfit1 and xfit2
c
c  inputs :
c    xfit1    lower bound of fitting range
c    xfit2    upper bound of fitting range
c    xdata    array of abscissa values for data
c    ydata    array of ordinate values for data
c    ndata    length of data arrays
c    nterms   number of terms in polynomial
c
c  outputs :
c    aout     coefficients of fitted polynomial to data
c
c   copyright 1992  university of washington :          matt newville
c
c  requires function nofx
c
c  see bevington pg 104 for expalanation of these variables
c
      implicit integer(i-n)
      implicit real(a-h,o-z)
c      implicit double precision(a-h,o-z)

       parameter (max= 5, max2m1 = 2*max-1, zero = 0.) 
       dimension         xdata(ndata), ydata(ndata), aout(nterms)
       double precision  sumx(max2m1), sumy(max)
       double precision  array(max,max), ain(max), delta, determ
       external          determ
c
c find points closest to endpoints of fitting range
       nfit1 = nofx(xfit1,xdata,ndata)
       nfit2 = nofx(xfit2,xdata,ndata)
       if (nfit1.gt.nfit2) then
            ntemp = nfit1
            nfit1 = nfit2
            nfit2 = ntemp
       elseif(nfit1.eq.nfit2) then
            go to 300
       end if
c
c   initialize internal arrays
       nmax   = 2 * nterms - 1
       do 100 i=1, nmax
          sumx(i) = zero
 100   continue
       do 110 i = 1, nterms
          ain(i) = zero
          sumy(i) = zero
          do 110 j = 1,  nterms
            array(i,j) = zero       
  110  continue
c
c  collect sums of data, sum of squares of data, etc.
       do 200 i = nfit1, nfit2 
          xi = xdata(i)
          yi = ydata(i)
          xterm = 1.0
          do 180 n=1, nmax
             sumx(n) = sumx(n) + xterm
             xterm   = xterm * xi
  180     continue
          yterm = yi
          do 190 n=1,nterms
             sumy(n) = sumy(n) + yterm
             yterm   = yterm * xi
  190     continue 
  200  continue
c
c construct matrices and evaluate coefficients
c
       do 210 j=1,nterms
         do 210 k=1,nterms
            array(j,k) = sumx(j + k - 1)
  210  continue 
       delta = determ(array,nterms,max)
       if (delta.ne.zero) then
           do 260 l=1,nterms
              do 250 j=1,nterms
                 do 240 k=1,nterms
                    array(j,k) = sumx(j+k-1)
  240            continue
                 array(j,l) = sumy(j)
  250         continue
              ain(l) = determ(array,nterms,max)/delta
  260      continue
       end if
  300  continue
       do 400 i = 1, nterms
          aout(i) = sngl(ain(i))
  400  continue
       return
c end  subroutine polyft
       end


      double precision function determ(array,nord,nrows)
c
c     calculate determinate of a square matrix
c        (from bevington "data reduction and error analysis
c         for the physical sciences" pg 294)
c     array: matrix to be analyzed
c     nterms: order of matrix
c     nrows:  first dimension of matrix in calling routine
c
      double precision array(nrows,nrows)
      determ = 1.
      do 150 k=1,nord

        if (array(k,k).ne.0) go to 130
        do 100 j=k,nord
          if (array(k,j).ne.0) go to 110
  100   continue
        determ = 0.
        go to 160
c
  110   do 120 i=k,nord
          save = array(i,j)
          array(i,j) = array(i,k)
  120   array(i,k) = save
        determ = -determ
c
c
  130   determ = determ*array(k,k)
        if (k.ge.nord) go to 150
        k1 = k+1
        do 140 i=k1,nord
          do 140 j=k1,nord
  140   array(i,j) = array(i,j)-array(i,k)*array(k,j)/array(k,k)
  150 continue
  160 return
c end double precision function determ 
      end
c%%%  
c%%%  information from the periodic table
c%%%  
c%%%  contents:
c%%%     s   z2s(isym,elem):  returns z number from symbol
c%%%     f   is2z(sym):       returns symbol from z number
c%%%     f   s2e(elem,edge):  returns energy from symbol and edge
c%%%     s   fixsym(elem):    returns char*2 as 1st upper, 2nd lower
c%%%  
c%%%  s = subroutine, f = function 
c%%%  
c%%%  all others written by bruce ravel and matthew newville  
c%%%  
c%%%  all executable statements in this source code must be in the same case
c%%%  that is, the executable statements must be uniformly upper case
c%%%  or uniformly lower case
c%%%  
      subroutine z2s(isym,elem)
c---------------------------------------------------------------------------
c  copyright 1993 university of washington     matt newville and bruce ravel
c---------------------------------------------------------------------------

c     returns atomic symbol from z number:  default is '  '
      character*2 elem,symbol(103)
c
      data (symbol(i),i=1,103) /'h','he','li','be','b','c','n','o',
     $'f','ne','na','mg','al','si','p','s','cl','ar','k','ca','sc',
     $'ti','v','cr','mn','fe','co','ni','cu','zn','ga','ge','as','se',
     $'br','kr','rb','sr','y','zr','nb','mo','tc','ru','rh','pd','ag',
     $'cd','in','sn','sb','te','i','xe','cs','ba','la','ce','pr','nd',
     $'pm','sm','eu','gd','tb','dy','ho','er','tm','yb','lu','hf','ta',
     $'w','re','os','ir','pt','au','hg','tl','pb','bi','po','at','rn',
     $'fr','ra','ac','th','pa','u','np','pu','am','cm','bk','cf','es',
     $'fm','md','no','lr'/

      elem = '  '
      if ((isym.ge.1).and.(isym.le.103)) elem = symbol(isym)

      return
      end

c************************************************************************

      function s2e(elem,edge)
c      double precision function s2e(elem,edge)
c      implicit double precision (a-h,o-z)

c  this function returns the energy of a given element and edeg
c  input:
c    elem: 2 character atomic symbol (case insensitive)
c    edge: k, l1, l2, l3  (case insensitive)
c  output:
c    s2e:  energy value

      parameter (nelem=94)
      character*(*) elem, edge
      character*2   ed, el, test
      dimension     ek(nelem), el1(nelem), el2(nelem), el3(nelem) 

      data (ek(i),i=1,60) /
     $          0.140000e-01, 0.250000e-01, 0.550000e-01, 0.112000e+00,
     $          0.188000e+00, 0.284000e+00, 0.402000e+00, 0.537000e+00,
     $          0.686000e+00, 0.867000e+00, 0.107200e+01, 0.130500e+01,
     $          0.156000e+01, 0.183900e+01, 0.214900e+01, 0.247200e+01,
     $          0.282200e+01, 0.320200e+01, 0.360700e+01, 0.403800e+01,
     $          0.449300e+01, 0.496500e+01, 0.546500e+01, 0.598900e+01,
     $          0.654000e+01, 0.711200e+01, 0.770900e+01, 0.833300e+01,
     $          0.897900e+01, 0.965900e+01, 0.103670e+02, 0.111040e+02,
     $          0.118680e+02, 0.126580e+02, 0.134740e+02, 0.143220e+02,
     $          0.152000e+02, 0.161050e+02, 0.170800e+02, 0.179980e+02,
     $          0.189860e+02, 0.199990e+02, 0.210450e+02, 0.221170e+02,
     $          0.232200e+02, 0.243500e+02, 0.255140e+02, 0.267110e+02,
     $          0.279400e+02, 0.292000e+02, 0.304910e+02, 0.318130e+02,
     $          0.331690e+02, 0.345820e+02, 0.359850e+02, 0.374410e+02,
     $          0.389250e+02, 0.404440e+02, 0.419910e+02, 0.435690e+02/

      data (ek(i),i=61,nelem) /
     $          0.451840e+02, 0.468350e+02, 0.485200e+02, 0.502400e+02,
     $          0.519960e+02, 0.537890e+02, 0.556180e+02, 0.574860e+02,
     $          0.593900e+02, 0.613320e+02, 0.633140e+02, 0.653510e+02,
     $          0.674140e+02, 0.695240e+02, 0.716760e+02, 0.738720e+02,
     $          0.761120e+02, 0.783950e+02, 0.807230e+02, 0.831030e+02,
     $          0.855280e+02, 0.880060e+02, 0.905270e+02, 0.931050e+02,
     $          0.957300e+02, 0.984170e+02, 0.101137e+03, 0.103922e+02,
     $          0.106755e+03, 0.109651e+03, 0.112601e+03, 0.115603e+03,
     $          0.,           0.121760e+03/

      data (el1(i),i=1,60) /
     $       0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
     $       0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
     $       0.000000e+00,  0.000000e+00,  0.000000e+00,  0.630000e-01,
     $       0.870000e-01,  0.118000e+00,  0.153000e+00,  0.193000e+00,
     $       0.238000e+00,  0.287000e+00,  0.341000e+00,  0.400000e+00,
     $       0.463000e+00,  0.531000e+00,  0.604000e+00,  0.682000e+00,
     $       0.754000e+00,  0.842000e+00,  0.929000e+00,  0.101200e+01,
     $       0.110000e+01,  0.119600e+01,  0.130200e+01,  0.141400e+01,
     $       0.153000e+01,  0.165300e+01,  0.178200e+01,  0.192000e+01,
     $       0.206500e+01,  0.221600e+01,  0.237300e+01,  0.253200e+01,
     $       0.269800e+01,  0.286600e+01,  0.304300e+01,  0.322400e+01,
     $       0.341200e+01,  0.360500e+01,  0.380600e+01,  0.401800e+01,
     $       0.423800e+01,  0.446500e+01,  0.469800e+01,  0.493900e+01,
     $       0.518800e+01,  0.545200e+01,  0.571300e+01,  0.598700e+01,
     $       0.626700e+01,  0.654900e+01,  0.683500e+01,  0.712600e+01/

      data (el1(i),i=61,nelem) /
     $       0.742800e+01,  0.773700e+01,  0.805200e+01,  0.837600e+01,
     $       0.870800e+01,  0.904700e+01,  0.939500e+01,  0.975200e+01,
     $       0.101160e+02,  0.104880e+02,  0.108700e+02,  0.112720e+02,
     $       0.116800e+02,  0.120980e+02,  0.125250e+02,  0.129640e+02,  
     $       0.134240e+02,  0.138920e+02,  0.143530e+02,  0.148460e+02,
     $       0.153440e+02,  0.158600e+02,  0.163850e+02,  0.169390e+02,
     $       0.174930e+02,  0.180490e+02,  0.186390e+02,  0.192370e+02,
     $       0.198400e+02,  0.204700e+02,  0.211050e+02,  0.217560e+02,
     $       0.,            0.230950e+02/

      data (el2(i), i=1,63) / 27*0.,
     $      0.872000e+00,  0.952000e+00,  0.104400e+01,  0.114200e+01,
     $      0.124900e+01,  0.136000e+01,  0.147700e+01,  0.159600e+01,
     $      0.172600e+01,  0.186300e+01,  0.200700e+01,  0.215600e+01,
     $      0.230700e+01,  0.246500e+01,  0.262500e+01,  0.279300e+01,
     $      0.296700e+01,  0.314600e+01,  0.333000e+01,  0.352400e+01,
     $      0.372700e+01,  0.393800e+01,  0.415600e+01,  0.438100e+01,
     $      0.461200e+01,  0.485200e+01,  0.510000e+01,  0.535900e+01,
     $      0.562400e+01,  0.589100e+01,  0.616500e+01,  0.644100e+01,
     $      0.672200e+01,  0.701300e+01,  0.731200e+01,  0.761800e+01/

      data (el2(i), i=64,nelem) /
     $      0.793100e+01,  0.825200e+01,  0.858100e+01,  0.891900e+01,
     $      0.926500e+01,  0.961800e+01,  0.997800e+01,  0.103490e+02,
     $      0.107390e+02,  0.111360e+02,  0.115420e+02,  0.119570e+02,
     $      0.123840e+02,  0.128240e+02,  0.132730e+02,  0.137330e+02,
     $      0.142090e+02,  0.146980e+02,  0.151980e+02,  0.157080e+02,
     $      0.162440e+02,  0.167850e+02,  0.173370e+02,  0.179070e+02,
     $      0.184840e+02,  0.190830e+02,  0.196920e+02,  0.203140e+02,
     $      0.209470e+02,  0,             0.222630e+02/

      data (el3(i), i=1,63) / 27*0.,
     $      0.885000e+00,  0.932000e+00,  0.102100e+01,  0.111500e+01,
     $      0.121800e+01,  0.132500e+01,  0.143600e+01,  0.155000e+01,
     $      0.167500e+01,  0.180500e+01,  0.194000e+01,  0.208000e+01,
     $      0.222300e+01,  0.237100e+01,  0.252000e+01,  0.267700e+01,
     $      0.283800e+01,  0.300300e+01,  0.317300e+01,  0.335100e+01,
     $      0.353700e+01,  0.373000e+01,  0.392900e+01,  0.413200e+01,
     $      0.434100e+01,  0.455700e+01,  0.478100e+01,  0.501200e+01,
     $      0.524700e+01,  0.548300e+01,  0.572400e+01,  0.596500e+01,
     $      0.620800e+01,  0.646000e+01,  0.671700e+01,  0.697700e+01/

      data (el3(i), i=64,nelem) / 
     $      0.724300e+01,  0.751500e+01,  0.779000e+01,  0.807100e+01,
     $      0.835800e+01,  0.864800e+01,  0.894300e+01,  0.924400e+01,
     $      0.956100e+01,  0.988100e+01,  0.102040e+02,  0.105340e+02,
     $      0.108710e+02,  0.112150e+02,  0.115640e+02,  0.119180e+02,
     $      0.122840e+02,  0.126570e+02,  0.130550e+02,  0.134180e+02,
     $      0.138140e+02,  0.142140e+02,  0.146120e+02,  0.150310e+02,
     $      0.154440e+02,  0.158710e+02,  0.163000e+02,  0.167330e+02,
     $      0.171670e+02,  0.,            0.180530e+02/

      ed=edge
      el=elem
      i=is2z(el)

c  check case
c  ab must be the same case as k,l1,l2,l3 below for this to work!
      test = 'ab'
      call case(test,ed)
      call case(test,el)

      if ((el.eq.'nu').or.(i.eq.0)) then
          s2e = 0.e0
          goto 99
      endif

      s2e = 0.e0
      if (ed.eq.'k') then
          s2e = ek(i)
      elseif (ed.eq.'l1') then
          s2e = el1(i)
      elseif (ed.eq.'l2') then
          s2e = el2(i)
      elseif (ed.eq.'l3') then
          s2e = el3(i)
      endif

 99   continue 
      return
c  end function s2e
      end

c**********************************************************************

      integer function is2z(sym)
c---------------------------------------------------------------------------
c  copyright 1993 university of washington     matt newville and bruce ravel
c---------------------------------------------------------------------------

c     returns z number given atomic symbol: default is 0
      character*2 symbol(103), sym, sy, test
c
      data (symbol(i),i=1,103) /'h','he','li','be','b','c','n','o',
     $'f','ne','na','mg','al','si','p','s','cl','ar','k','ca','sc',
     $'ti','v','cr','mn','fe','co','ni','cu','zn','ga','ge','as','se',
     $'br','kr','rb','sr','y','zr','nb','mo','tc','ru','rh','pd','ag',
     $'cd','in','sn','sb','te','i','xe','cs','ba','la','ce','pr','nd',
     $'pm','sm','eu','gd','tb','dy','ho','er','tm','yb','lu','hf','ta',
     $'w','re','os','ir','pt','au','hg','tl','pb','bi','po','at','rn',
     $'fr','ra','ac','th','pa','u','np','pu','am','cm','bk','cf','es',
     $'fm','md','no','lr'/

c test case of this routine : note that 'ab' must be the same
c                             case as all of the symbols above
      sy   = sym
      test = 'ab'
      call case(test,sy)

      is2z = 0
      do 110 i=1,103
        if (sy.eq.symbol(i)) then
          is2z = i
          goto 120
        end if
110   continue
120   return
c end integer function is2z
      end

c********************************************************************

      subroutine fixsym(sym)

c  returns a word with the first letter capitalized and the remaining
c  letters in lower case
c  this is very useful for writing out atomic symbols

      character*2 toss, sym*(*)

      toss = sym
      call upper(toss(1:1))
      call lower(toss(2:2))
      ii   = istrln(sym)
      if (ii.gt.2) then
          call lower(sym(3:ii))
          sym  = toss(1:1)//toss(2:2)//sym(3:ii)
      else
          sym  = toss(1:1)//toss(2:2)
      endif
      return 
c  end subroutine fixsym
      end

        subroutine interp(x,y,npts,nterms,xin,yout)
c
c       interpolation routine from bevington's book
c
        double precision deltax,delta,a,prod,sum
        dimension x(*),y(*)
        dimension delta(10),a(10)
c
c        search for  appropriate value of x(1)
c
11      do 19 i=1,npts
        if(xin-x(i)) 13,17,19
13      i1=i-nterms/2
        if(i1) 15,15,21
15      i1=1
        go to 21
17      yout=y(i)
18      go to 61
19      continue
        i1=npts-nterms+1
21      i2=i1+nterms-1
        if(npts-i2) 23,31,31
23      i2=npts
        i1=i2-nterms+1
25      if(i1) 26,26,31
26      i1=1
27      nterms=i2-i1+1
c
c        evaluate deviations delta
c
31      denom=x(i1+1)-x(i1)
        deltax=(xin-x(i1))/denom
        do 35 i=1,nterms
        ix=i1+i-1
35      delta(i)=(x(ix)-x(i1))/denom
c
c        accumulate coefficients a
c
40      a(1)=y(i1)
41      do 50 k=2,nterms
        prod=1.
        sum=0.
        imax=k-1
        ixmax=i1+imax
        do 49 i=1,imax
        j=k-i
        prod=prod*(delta(k)-delta(j))
49      sum=sum-a(j)/prod
50      a(k)=sum+y(ixmax)/prod
c
c        accumulate sum of expansion
c
51      sum=a(1)
        do 57 j=2,nterms
        prod=1.
        imax=j-1
        do 56 i=1,imax
56      prod=prod*(deltax-delta(i))
57      sum=sum+a(j)*prod
60      yout=sum
61      return
c end subroutine interp
        end

      function  nofx(x,array,npts)

      implicit integer(i-n)
      implicit real(a-h,o-z)
c      implicit double precision(a-h,o-z)

c
c   function nofx
c
c   purpose
c     given a value x and an array of values, find the index
c     corresponding to the array element closest to x
c
c   usage
c     n = nofx(x,array,npts)
c
c   parameters
c     x     - a given value
c     array - array of values, assumed to be stored in order of
c             increasing value
c     npts  - number of elements in array
c
c   subroutines and function subprograms required
c     none
c
c   written  8/11/81 by j.m. tranquada
c
      dimension  array(npts)
      imin = 1
      imax = npts
      inc = ( imax - imin ) / 2
   10 continue
      it  = imin + inc
      xit = array(it)
      if ( x .lt. xit ) then
         imax = it
      else if ( x .gt. xit ) then
         imin = it
      else
         nofx = it
         return
      endif
      inc = ( imax - imin ) / 2
      if ( inc .gt. 0 ) go to 10
      xave = ( array(imin) + array(imin+1) ) / 2.
      if ( x .lt. xave ) then
         nofx = imin
      else
         nofx = imin + 1
      endif
      return
c end function nofx
      end
